<?xml version="1.0"?>

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "../dtd/docbook/4.1.2/docbookx.dtd">

<!-- ********************************************************************
     $Id$
     ******************************************************************** -->

<chapter id="jmx">
    <title>JMX Control</title> 
    <section>
        <title>Controlling the Java Service Wrapper using JMX</title>
        <para>
            The Java Service Wrapper provides a pair of JMX MBean interfaces
            which make it possible to control the Wrapper using a JMX interface.
            This section will describe how to configure your JMX enabled
            application so that the MBeans provided with the Java Service
            Wrapper are available.
        </para>
        <itemizedlist>
            <listitem>
                <ulink url="#jconsole">JConsole</ulink>
            </listitem>
            <listitem>
                <ulink url="#jboss">JBoss</ulink>
            </listitem>
            <listitem>
                <ulink url="#mx4j">MX4J</ulink>
            </listitem>
            <listitem>
                <ulink url="#sun">Sun JMX Reference Implementation</ulink>
            </listitem>
        </itemizedlist>
        <section id="jconsole">
            <title>JConsole</title>
            <para>
                Sun's JDK 5.0 includes the
                <ulink url="http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html">Java Monitoring and Management Console (JConsole) tool</ulink>.
                See the above link for details, but JConsole makes it easy to connect
                to properly configured JVMs and monitor and manage their various
                functions.
            </para>
            <para>
                For security reasons, the ability to remotely monitor a JVM is not
                enabled by default.  To enable this functionality it is necessary
                to define the <literal moreinfo="none">com.sun.management.jmxremote</literal>
                system property when launching the JVM.   This can be done using the wrapper
                by specifying a JVM parameter as follows.  See the
                <ulink url="prop-java-additional-n.html">wrapper.java.additional.&lt;n&gt;</ulink>
                property for details of its usage:
            </para>
            <informalexample>
                <screen format="linespecific"><![CDATA[wrapper.java.additional.1=-Dcom.sun.management.jmxremote]]></screen>
            </informalexample>
            <para>
                The Wrapper currently provides 2 MBean interfaces.   The primary MBean,
                <literal moreinfo="none">org.tanukisoftware.wrapper.jmx.WrapperManagerMBean</literal>,
                provides basic information about the Wrapper and JVM as well as the
                ability to stop and restart the JVM as well as trigger a full thread dump.
                The registration of this MBean is controlled by setting the
                <literal moreinfo="none">org.tanukisoftware.wrapper.WrapperManager.mbean</literal>
                system property.  It is enabled by default.
            </para>
            <para>
                The second MBean, <literal moreinfo="none">org.tanukisoftware.wrapper.jmx.WrapperManagerTestingMBean</literal>,
                makes it possible to trigger various failure states for testing and should
                not be made enabled outside of a testing environment.
                The registration of this MBean is controlled by setting the
                <literal moreinfo="none">org.tanukisoftware.wrapper.WrapperManager.mbean.testing</literal>
                system property.  It is disabled by default.
            </para>
            <informalexample>
                <screen format="linespecific"><![CDATA[wrapper.java.additional.1=-Dcom.sun.management.jmxremote
wrapper.java.additional.2=-Dorg.tanukisoftware.wrapper.WrapperManager.mbean=true
wrapper.java.additional.3=-Dorg.tanukisoftware.wrapper.WrapperManager.mbean.testing=false]]></screen>
            </informalexample>
            <para>
                The registered Wrapper MBeans will show up on the MBean tab of the JConsole
                interface under the <literal moreinfo="none">org.tanukisoftware.wrapper</literal>
                package.
            </para>
        </section>
        <section id="jboss">
            <title>JBoss</title>
            <para>
                Registering the Java Service Wrapper's MBean interfaces with JBoss is
                surprising simple.  This assumes that you have already gotten JBoss
                integrated with the Java Service Wrapper.  See the
                <ulink url="integrate.html">Integration</ulink> section, in particular
                the example using JBoss.  This explanation assumes that you have
                installed all of the Wrapper files in the locations described in the
                JBoss integration example.  Particularly the
                <literal moreinfo="none">wrapper.jar</literal> file is assumed to be
                located in the <literal moreinfo="none">${jboss.home}/lib</literal>
                directory.
            </para>
            <para>
                JBoss allows you to register as an MBean, any Object which implements
                an interface whose name is the same as the class, appended by "MBean".
                The Wrapper provides two such classes in the
                <literal moreinfo="none">org.tanukisoftware.wrapper.jmx</literal> package.
                <literal moreinfo="none">WrapperManager</literal> and
                <literal moreinfo="none">WrapperManagerTesting</literal>.  The first
                provides several functions to restart and stop the JVM as well as
                providing other information about the Java Service Wrapper.  The
                second class exposes a few methods which can be useful in the testing
                cycle.  They are broken out in case you wish to not include them in
                a final product release.  See the <ulink url="javadocs.html">javadocs</ulink>
                for more details.
            </para>
            <para>
                To register both of the above MBeans, create an XML file named
                <literal moreinfo="none">java-service-wrapper-service.xml</literal> in
                the <literal moreinfo="none">${jboss.home}/server/default/deploy</literal>
                directory.  The file should contain the following:
            </para>
            <informalexample>
                <screen format="linespecific"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE server>
<server>
    <classpath archives="wrapper.jar" codebase="../../lib"/>
    
    <mbean code="org.tanukisoftware.wrapper.jmx.WrapperManager"
           name="JavaServiceWrapper:service=WrapperManager"/>
    
    <mbean code="org.tanukisoftware.wrapper.jmx.WrapperManagerTesting"
           name="JavaServiceWrapper:service=WrapperManagerTesting"/>
</server>]]></screen>
            </informalexample>
            <para>
                Notice that the location of the <literal moreinfo="none">wrapper.jar</literal>
                jar file is relative to the location of the XML file.
            </para>
            <para>
                Upon saving the file, JBoss should detect it and register your new
                MBeans almost immediately.  No need to restart JBoss.  Pretty Cool.
            </para>
            <para>
                Now, to actually use the new MBeans, simply point your browser to
                JBoss's JMX interface at:
                <ulink url="http://localhost:8080/jmx-console/">http://localhost:8080/jmx-console/</ulink>
                You should notice a <literal moreinfo="none">JavaServiceWrapper</literal>
                Agent with two MBeans, <literal moreinfo="none">WrapperManager</literal>
                and <literal moreinfo="none">WrapperManagerTesting</literal>.
                Selecting either beans will present you with a set of attributes
                and actions provided by the MBean.
            </para>
        </section>
        <section id="mx4j">
            <title>MX4J</title>
            <para>
                To do.  (This section is incomplete and just a jumble of my notes at this point.
                Feel free to send in any suggestions for this section)
            </para>
            <para>
                <ulink url="http://mx4j.sourceforge.net/">MX4J</ulink>
            </para>
        </section>
        <section id="sun">
            <title>Sun JMX Reference Implementation</title>
            <para>
                To do.  (This section is incomplete and just a jumble of my notes at this point.
                Feel free to send in any suggestions for this section)
            </para>
            <para>
                Sun's reference implementation is just that, a reference implementation.
                There are not a fixed set of steps that you can follow to register the
                the Wrapper's MBeans.  Each application tends to have created their own
                custom way of registering such beans.
            </para>
            <para>
                Although many applications have defined their own syntax, Sun has defined
                MLET tags, short for Management Applet, as a means for defining MBeans.
                Their syntax is described in the javadocs for the 
                <ulink url="http://java.sun.com/j2ee/1.4/docs/api/javax/management/loading/MLet.html">javax.management.loading.MLet</ulink>
                class.  The following MLET tags can be used to register the MBeans provided
                with the Wrapper.  Notice that they are not really XML.
            </para>
            <informalexample>
                <screen format="linespecific"><![CDATA[<MLET
    CODE = org.tanukisoftware.wrapper.jmx.WrapperManager
    ARCHIVE = "../lib/wrapper.jar"
    NAME = JavaServiceWrapper:service=WrapperManager>
<MLET
    CODE = org.tanukisoftware.wrapper.jmx.WrapperManagerTesting
    ARCHIVE = "../lib/wrapper.jar"
    NAME = JavaServiceWrapper:service=WrapperManagerTesting>]]></screen>
            </informalexample>
            <para>
                More information is available on Sun's
                <ulink url="http://java.sun.com/products/JavaManagement/index.html">Java Managagement Extensions (JMX) Home Page</ulink>.
            </para>
        </section>
    </section>
</chapter>
