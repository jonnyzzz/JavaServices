<?xml version="1.0"?>

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "../dtd/docbook/4.1.2/docbookx.dtd">

<!-- ********************************************************************
     $Id$
     ******************************************************************** -->

<chapter id="prop-filter-x-n">
    <title>wrapper.filter.&lt;x&gt;.&lt;n&gt; Properties</title>
    <section>
        <title>Configuration Property Overview</title>
        <itemizedlist>
            <listitem>
                <ulink url="properties.html">Configuration Property Overview</ulink>
            </listitem>
            <listitem>
                <ulink url="props-logging.html">Logging Configuration Properties</ulink>
            </listitem>
            <listitem>
                <ulink url="properties.html#name">Property List by Name</ulink>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>wrapper.filter.trigger.&lt;n&gt; and wrapper.filter.action.&lt;n&gt;</title>
        <para>
            The wrapper.filter pair of properties make it possible to filter
            the output of a JVM and then perform some action whenever a
            specific trigger string is found.   The filtering process works by
            comparing JVM console output against registered triggers until a
            match is found.  At that point the associated action is executed.
            Only the first matching trigger will be handled for any line of
            output.  Each trigger/action pair ends with an integer number
            counting up from 1. There can be no missing numbers.  If an action
            is omitted, it will default to
            <literal moreinfo="none">RESTART</literal>.
        </para>
        <para>
            The trigger can be any string.  Possible actions are
            <literal moreinfo="none">RESTART</literal>,
            <literal moreinfo="none">SHUTDOWN</literal>, and
            <literal moreinfo="none">NONE</literal>.
            <literal moreinfo="none">RESTART</literal> will stop the current
            JVM and then restart a new invocation.
            <literal moreinfo="none">SHUTDOWN</literal> will stop the JVM as
            well as the Wrapper.  <literal moreinfo="none">NONE</literal> is
            useful because it will prevent any triggers with a higher number
            from being triggered.
        </para>
        <para>
            The following example will monitor the JVM output and then restart
            the JVM automatically whenever a
            <literal moreinfo="none">java.lang.OutOfMemoryError</literal> is
            thrown to the console.  Depending on where in an application the
            error is thrown, it is not always possible to trap and handle the
            error in a useful way from within the JVM.
        </para>
        <para>
            Filters work by monitoring the console output of the JVM.  In order
            for a trigger to be fired by an exception, the Java application
            must print the message being filtered to the console.
        </para>
        <informalexample>
            <simpara><emphasis>Example:</emphasis></simpara>
            <screen format="linespecific"><![CDATA[wrapper.filter.trigger.1=java.lang.OutOfMemoryError
wrapper.filter.action.1=RESTART]]></screen>
        </informalexample>
        <para>
            The next example demonstrates how to trigger a JVM restart whenever
            the string <literal moreinfo="none">Error</literal> appears anywhere
            in the output, with the exception of the case where the string is
            part of the larger string <literal moreinfo="none">IgnoreError</literal>.
        </para>
        <informalexample>
            <simpara><emphasis>Example:</emphasis></simpara>
            <screen format="linespecific"><![CDATA[wrapper.filter.trigger.1=IgnoreError
wrapper.filter.action.1=NONE
wrapper.filter.trigger.2=Error
wrapper.filter.action.2=RESTART]]></screen>
        </informalexample>
        <para>
            The string being filtered can contain spaces.  But due to the way the
            configuration properties are loaded in general, any leading of trailing
            spaces will be trimmed when the property is loaded.
        </para>
        <informalexample>
            <simpara><emphasis>Example:</emphasis></simpara>
            <screen format="linespecific"><![CDATA[wrapper.filter.trigger.1=Restart me now.
wrapper.filter.action.1=RESTART]]></screen>
        </informalexample>
    </section>
</chapter>
