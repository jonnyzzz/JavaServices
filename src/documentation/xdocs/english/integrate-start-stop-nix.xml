<?xml version="1.0"?>

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "../dtd/docbook/4.1.2/docbookx.dtd">

<!-- ********************************************************************
     $Id$
     ******************************************************************** -->

<chapter id="integrate-start-stop-nix">
    <title>WrapperStartStopApp Integration (Linux / UNIX)</title>
    <section>
        <title>Integration Methods</title>
        <itemizedlist>
            <listitem>
                <ulink url="integrate.html">Methods of Integrating with the Java Service Wrapper</ulink>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Method 2 - WrapperStartStopApp Integration (Linux / UNIX)</title>
        <itemizedlist>
            <listitem>
                <ulink url="#overview">Overview</ulink>
            </listitem>
            <listitem>
                <ulink url="#detailed">Detailed Instructions</ulink>
            </listitem>
        </itemizedlist>
        <section id="overview">
            <title>Overview</title>
            <para>
                The second method is to use the
                <literal moreinfo="none">WrapperStartStopApp</literal> helper class.
                This method provides a way to integrate with applications like Tomcat,
                which are started using one class and then stopped using another
                class.  Typically, this kind of application will open a server socket
                on startup whose job is to wait for a connection which triggers a
                shutdown.  The shutdown, or "stop", class when launched then triggers
                the shutdown by connecting to application.   The Wrapper works with
                this kind of application by starting up the application, as in the
                first method, using the "start" class and then calling the main method
                of the "stop" class when it is time for the application to be shutdown.
            </para>
            <para>
                When integrating with the <literal moreinfo="none">WrapperStartStopApp</literal>
                helper class, the <literal moreinfo="none">WrapperStartStopApp</literal>
                class replaces an application's main class.  This gives the
                <literal moreinfo="none">WrapperStartStopApp</literal> class a chance to
                immediately initialize the <literal moreinfo="none">WrapperManager</literal>
                and register the JVM with the Wrapper.  The
                <literal moreinfo="none">WrapperStartStopApp</literal> class then
                manages all interaction with the Wrapper as well as the life-cycle of
                an application.  When the Wrapper sends a start message to the JVM via
                the <literal moreinfo="none">WrapperManager</literal>, the main method of
                the application's "start" class is called.  Likewise, when the Wrapper
                sends a stop message, the main method of the application's "stop" class is
                called.
            </para>
            <para>
                When the <literal moreinfo="none">WrapperStartStopApp</literal> helper
                class is launched, it needs to be told about the class names of both
                the "start" and "stop" classes as well as any parameters which need to
                be provided to the main methods of each class.   This results in a
                parameter list which is a little more complicated than with the
                <literal moreinfo="none">WrapperSimpleApp</literal> helper class.
            </para>
            <para>
                The first parameter passed to the <literal moreinfo="none">WrapperStartStopApp</literal>
                class will be the full class name of the "start" class.  This is followed
                by a count of the parameters to the "start" class's main method which
                will come next.  After the "start" class's parameters, comes the "stop"
                class's	full class name.  This is followed a true/false flag which
                tells the <literal moreinfo="none">WrapperStartStopApp</literal> class
                whether or not it should wait until all non-daemon threads have completed
                before actually exiting.  This flag is then followed by the "stop"
                class's parameter count and parameters.  Don't worry if this is confusing
                right now.  A detailed example is provided below.
            </para>
            <para>
                The following section will walk you through a detailed explanation of
                how to configure <ulink url="http://tomcat.apache.org/">Tomcat</ulink>
                to run within the Wrapper.  Most other applications can be integrated by
                following the same steps.
            </para>
        </section>
        <section id="detailed">
            <title>Detailed Instructions</title>
            <section>
                <title>Install Tomcat</title>
                <para>
                    This tutorial will start with a clean install of
                    <ulink url="http://tomcat.apache.org/">Tomcat</ulink>.  We
                    used version 4.1.18 so the exact steps may be slightly different
                    depending on the exact version installed.  Tomcat was installed in
                    the <literal moreinfo="none">/usr/lib</literal> directory,
                    resulting in a Tomcat Home directory of
                    <literal moreinfo="none">/usr/lib/jakarta-tomcat-4.1.18</literal>.
                </para>
            </section>
            <section>
                <title>Installing Wrapper Files</title>
                <para>
                    There are four files which are required to be able to use the
                    Wrapper.  We will also copy over a script which makes it easy to
                    launch and control the Wrapper.
                </para>
                <note>
                    <para>
                        Please make sure that you are using the
                        <literal moreinfo="none">wrapper</literal>, and
                        <literal moreinfo="none">libwrapper.so</literal> files which
                        were built for the platform being run.   It sounds obvious,
                        but the Linux version will not work on Solaris for example.
                    </para>
                </note>
                <section>
                    <title>bin directory</title>
                    <para>
                        The Wrapper is shipped with a <literal moreinfo="none">sh</literal>
                        script which can be used to reliably start and stop any Java
                        application controlled by the Java Service Wrapper.
                    </para>
                    <para>
                        First we will copy the following files into the Tomcat
                        <literal moreinfo="none">bin</literal> directory:  
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[{WRAPPER_HOME}/bin/wrapper
{WRAPPER_HOME}/src/bin/sh.script.in]]></screen>
                    </informalexample>
                    <para>
                        Rename the script file to reflect the name of the application.
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[{TOMCAT_HOME}/bin/tomcat]]></screen>
                    </informalexample>
                    <para>
                        Now open the script into an editor.  We need to set the long and
                        short names to reflect that the script is being used to launch
                        Tomcat.  You will see two variables immediately after the header
                        of the script.  <literal moreinfo="none">APP_NAME</literal>
                        and <literal moreinfo="none">APP_LONG_NAME</literal>.  Note that
                        the default values of both of these variables are
                        <ulink url="http://ant.apache.org/">Ant</ulink> friendly
                        tokens which can easily be replaced as part of a build.
                        Suggested values for these variables are shown below.
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[APP_NAME="tomcat"
APP_LONG_NAME="Tomcat Application Server"]]></screen>
                    </informalexample>
                    <para>
                        These script should not require any additional modification.
                        It does assume that the <literal moreinfo="none">wrapper.conf</literal>
                        file will be located within a
                        <literal moreinfo="none">conf</literal> directory one level up,
                        <literal moreinfo="none">../conf/wrapper.conf</literal>.  If
                        you wish to locate this file someplace else, then that can also
                        be set using the <literal moreinfo="none">WRAPPER_CONF</literal>
                        variable in the script.
                    </para>
                    <note>
                        <para>
                            Important!  Before proceeding, please make sure that all
                            three files copied into the <literal moreinfo="none">bin</literal>
                            directory have their executable bit set.
                        </para>
                    </note>
                </section>
                <section>
                    <title>lib directory</title>
                    <para>
                        Tomcat does not have a <literal moreinfo="none">lib</literal>
                        directory, which is the standard place for the Wrapper's
                        library files to be located.  So for Tomcat, we will place them
                        into the <literal moreinfo="none">common/lib</literal> directory.
                        Copy the following two files into that directory:
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[{WRAPPER_HOME}/lib/libwrapper.so
{WRAPPER_HOME}/lib/wrapper.jar]]></screen>
                    </informalexample>
                    <para>
                        The <literal moreinfo="none">libwrapper.so</literal> file is a
                        native library required by the portion of the Wrapper which
                        runs within the JVM.  The <literal moreinfo="none">wrapper.jar</literal>
                        file contains all of the Wrapper classes.
                    </para>
                </section>
                <section>
                    <title>conf directory</title>
                    <para>
                        The Wrapper requires a configuration file.  Please
                        copy the template <literal moreinfo="none">wrapper.conf</literal>
                        file into the <literal moreinfo="none">conf</literal>
                        directory.
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[{WRAPPER_HOME}/src/conf/wrapper.conf.in]]></screen>
                    </informalexample>
                    <para>
                        Be sure to remove the <literal moreinfo="none">.in</literal>
                        extension so that the file is named
                        <literal moreinfo="none">wrapper.conf</literal>.  You should
                        now have:
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[{TOMCAT_HOME}/conf/wrapper.conf]]></screen>
                    </informalexample>
                    <para>
                        If you wish to relocate the configuration file, you are free
                        to do so.  You will need to modify the batch scripts copied
                        into the <literal moreinfo="none">bin</literal> directory above,
                        to reflect the new location.
                    </para>
                </section>
                <section>
                    <title>logs directory</title>
                    <para>
                        The default <literal moreinfo="none">wrapper.conf</literal>
                        file will place a <literal moreinfo="none">wrapper.log</literal>
                        file in a <literal moreinfo="none">logs</literal> directory
                        under the application home directory.  Tomcat already has
                        such a directory, so we are all set.
                    </para>
                    <para>
                        If you wish to place the log file in another location, you will
                        need to edit the <literal moreinfo="none">wrapper.conf</literal>
                        file and modify the <literal moreinfo="none">wrapper.logfile</literal>
                        property to reflect the new location.
                    </para>
                </section>
            </section>
            <section>
                <title>Locate the Application's Java Command Line</title>
                <para>
                    Before the Wrapper can be configured to launch an Application,
                    you will need to know the full Java command which is normally
                    used.
                </para>
                <para>
                    Most applications make use of a script to build up the actual
                    command line.  These scripts tend to get quite unwieldy and
                    in fact, the ability to avoid having to work with them is one of
                    the benefits of working with the Wrapper.
                </para>
                <para>
                    Tomcat is launched by using a script called 
                    <literal moreinfo="none">startup.sh</literal> and then
                    shutdown using a script called
                    <literal moreinfo="none">shutdown.sh</literal>.  It is
                    launched by first changing the current directory to the
                    <literal moreinfo="none">bin</literal> directory and then
                    run from there.  If you open
                    <literal moreinfo="none">startup.sh</literal> into an editor,
                    you will notice after some investigation, that Java is not
                    actually launched from this script.  Rather another script,
                    <literal moreinfo="none">catalina.sh</literal>, is
                    called.  Tomcat's scripts are very advanced and allow the user
                    to do a lot of configuration from the command line.  The command
                    line that we will capture and use with the Wrapper will actually
                    be a snapshot of one such configuration.  This example will
                    assume that no parameters are passed to either the startup
                    or shutdown scripts when they are run.
                </para>
                <para>
                    If you open <literal moreinfo="none">catalina.sh</literal>
                    into an editor and scroll down towards the bottom of the file,
                    you will see a section which responds to the "start" command.
                    There are then two options for launching the JVM with or without
                    a security manager.  To keep things simple, we will use the version
                    without a security manager.  The lines we are interested in look
                    like the following:
                </para>
                <informalexample>
                    <screen format="linespecific"><![CDATA[    "$_RUNJAVA" $JAVA_OPTS $CATALINA_OPTS \
      -Djava.endorsed.dirs="$JAVA_ENDORSED_DIRS" -classpath "$CLASSPATH" \
      -Dcatalina.base="$CATALINA_BASE" \
      -Dcatalina.home="$CATALINA_HOME" \
      -Djava.io.tmpdir="$CATALINA_TMPDIR" \
      org.apache.catalina.startup.Bootstrap "$@" start \
      >> "$CATALINA_BASE"/logs/catalina.out 2>&1 &]]></screen>
                </informalexample>
                <para>
                    The majority of the batch file has the task of collecting system
                    specific information and storing that information into environment
                    variables.  The line above then expands all of the collected
                    information into the final Java command which launches the
                    application.  From looking at the source of the batch file,
                    we hope you appreciate the complexity and the desire to have to
                    avoid completely writing such scripts yourself.
                </para>
                <para>
                    In order to configure the Wrapper, all that is really needed is
                    the final expanded command line.  Rather than reading through the
                    entire script and attempting to understand it, we will use a
                    simple trick to display the final command line in the console.
                    Edit the script by changing it as follows:
                </para>
                <informalexample>
                    <screen format="linespecific"><![CDATA[    #"$_RUNJAVA" $JAVA_OPTS $CATALINA_OPTS \
    #  -Djava.endorsed.dirs="$JAVA_ENDORSED_DIRS" -classpath "$CLASSPATH" \
    #  -Dcatalina.base="$CATALINA_BASE" \
    #  -Dcatalina.home="$CATALINA_HOME" \
    #  -Djava.io.tmpdir="$CATALINA_TMPDIR" \
    #  org.apache.catalina.startup.Bootstrap "$@" start \
    #  >> "$CATALINA_BASE"/logs/catalina.out 2>&1 &
    echo "$_RUNJAVA $JAVA_OPTS $CATALINA_OPTS " \
      "-Djava.endorsed.dirs=$JAVA_ENDORSED_DIRS -classpath $CLASSPATH" \
      "-Dcatalina.base=$CATALINA_BASE" \
      "-Dcatalina.home=$CATALINA_HOME" \
      "-Djava.io.tmpdir=$CATALINA_TMPDIR" \
      "org.apache.catalina.startup.Bootstrap $@ start" \
      ">> $CATALINA_BASE/logs/catalina.out 2>&1 &"]]></screen>
                </informalexample>
                <para>
                    If you now rerun the script, you will see something like the
                    following in the console (Your output will all be on one line):
                </para>
                <informalexample>
                    <screen format="linespecific"><![CDATA[/opt/IBMJava2-131/bin/java
  -Djava.endorsed.dirs=/usr/lib/jakarta-tomcat-4.1.18/bin:/usr/lib/jakarta-tomcat-4.1.18/common/endorsed
  -classpath /opt/IBMJava2-131/lib/tools.jar:/usr/lib/jakarta-tomcat-4.1.18/bin/bootstrap.jar
  -Dcatalina.base=/usr/lib/jakarta-tomcat-4.1.18 -Dcatalina.home=/usr/lib/jakarta-tomcat-4.1.18
  -Djava.io.tmpdir=/usr/lib/jakarta-tomcat-4.1.18/temp org.apache.catalina.startup.Bootstrap start
  >> /usr/lib/jakarta-tomcat-4.1.18/logs/catalina.out 2>&1 &]]></screen>
                </informalexample>
                <para>
                    We now need to repeat the same process for the
                    <literal moreinfo="none">shutdown.sh</literal> script.  If you
                    scroll down in the editor, you will locate the "stop" command just
                    below the section modified above:
                </para>
                <informalexample>
                    <screen format="linespecific"><![CDATA[  exec "$_RUNJAVA" $JAVA_OPTS $CATALINA_OPTS \
    -Djava.endorsed.dirs="$JAVA_ENDORSED_DIRS" -classpath "$CLASSPATH" \
    -Dcatalina.base="$CATALINA_BASE" \
    -Dcatalina.home="$CATALINA_HOME" \
    -Djava.io.tmpdir="$CATALINA_TMPDIR" \
    org.apache.catalina.startup.Bootstrap "$@" stop]]></screen>
                </informalexample>
                <para>
                    Once again, modify this section as follows:
                </para>
                <informalexample>
                    <screen format="linespecific"><![CDATA[  #exec "$_RUNJAVA" $JAVA_OPTS $CATALINA_OPTS \
  #  -Djava.endorsed.dirs="$JAVA_ENDORSED_DIRS" -classpath "$CLASSPATH" \
  #  -Dcatalina.base="$CATALINA_BASE" \
  #  -Dcatalina.home="$CATALINA_HOME" \
  #  -Djava.io.tmpdir="$CATALINA_TMPDIR" \
  #  org.apache.catalina.startup.Bootstrap "$@" stop
  echo "exec $_RUNJAVA $JAVA_OPTS $CATALINA_OPTS" \
    "-Djava.endorsed.dirs=$JAVA_ENDORSED_DIRS -classpath $CLASSPATH" \
    "-Dcatalina.base=$CATALINA_BASE" \
    "-Dcatalina.home=$CATALINA_HOME" \
    "-Djava.io.tmpdir=$CATALINA_TMPDIR" \
    "org.apache.catalina.startup.Bootstrap $@ stop"]]></screen>
                </informalexample>
                <para>
                    If you now run the <literal moreinfo="none">shutdown.sh</literal>
                    script, you will see something like the following in the console
                    (Your output will all be on one line):
                </para>
                <informalexample>
                    <screen format="linespecific"><![CDATA[exec /opt/IBMJava2-131/bin/java
  -Djava.endorsed.dirs=/usr/lib/jakarta-tomcat-4.1.18/bin:/usr/lib/jakarta-tomcat-4.1.18/common/endorsed
  -classpath /opt/IBMJava2-131/lib/tools.jar:/usr/lib/jakarta-tomcat-4.1.18/bin/bootstrap.jar
  -Dcatalina.base=/usr/lib/jakarta-tomcat-4.1.18 -Dcatalina.home=/usr/lib/jakarta-tomcat-4.1.18
  -Djava.io.tmpdir=/usr/lib/jakarta-tomcat-4.1.18/temp org.apache.catalina.startup.Bootstrap  stop]]></screen>
                </informalexample>
                <para>
                    Other than the <literal moreinfo="none">exec</literal>
                    at the beginning of the shutdown line, and the redirected output
                    of the startup line, the two commands are almost
                    identical.  The only difference is the parameter passed to the
                    main class at the end.  The <literal moreinfo="none">exec</literal>
                    portion of the shutdown command and redirection to capture console
                    output are not required when using the Wrapper so the rest of
                    this example will ignore those portions of the commands.
                </para>
                <para>
                    The Wrapper will also handle the quoting of elements of the Java
                    command line that it builds up.  so it is not necessary for them
                    to be carried over into the configuration file below.
                </para>
            </section>
            <section>
                <title>Modifying the wrapper.conf File</title>
                <para>
                    In order to be able to use this command with the Wrapper, we need
                    to break up its components.  Open the
                    <literal moreinfo="none">wrapper.conf</literal> file into an editor
                    and make the changes below.
                </para>
                <note>
                    <para>
                        Where properties are mentioned below, links are provided to their
                        descriptions.  Please take the time to review the descriptions of
                        any properties which are modified.  In many cases, there are
                        further details on their usage which are not mentioned here.
                    </para>
                </note>
                <section>
                    <title>Java Executable</title>
                    <para>
                        First is to extract the java executable and assign it to the
                        <literal moreinfo="none"><ulink url="prop-java-command.html">wrapper.java.command</ulink></literal>
                        property:
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[wrapper.java.command=/opt/IBMJava2-131/bin/java]]></screen>
                    </informalexample>
                </section>
                <section>
                    <title>Java Arguments</title>
                    <para>
                        Most applications provide a number of parameters to the Java
                        executable when it is launched.  The Wrapper provides special
                        properties for configuring things like memory, as well as
                        class and library paths.  These will be covered below, however
                        any other settings are configured using the 
                        <literal moreinfo="none"><ulink url="prop-java-additional-n.html">wrapper.java.additional.&lt;n&gt;</ulink></literal>
                        series of properties.
                    </para>
                    <para>
                        The Tomcat command line has several such properties (Note the first
                        line was wrapped for the documentation.  It is actually on a single
                        line without spaces):
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[wrapper.java.additional.1=-Djava.endorsed.dirs=/usr/lib/jakarta-tomcat-4.1.18/bin:
  /usr/lib/jakarta-tomcat-4.1.18/common/endorsed
wrapper.java.additional.2=-Dcatalina.base=/usr/lib/jakarta-tomcat-4.1.18
wrapper.java.additional.3=-Dcatalina.home=/usr/lib/jakarta-tomcat-4.1.18
wrapper.java.additional.4=-Djava.io.tmpdir=/usr/lib/jakarta-tomcat-4.1.18/temp]]></screen>
                    </informalexample>
                </section>
                <section>
                    <title>Classpath</title>
                    <para>
                        Next, comes the classpath, which is configured using the
                        <literal moreinfo="none"><ulink url="prop-java-classpath-n.html">wrapper.java.classpath.&lt;n&gt;</ulink></literal>
                        properties.  The Wrapper requires that the classpath be
                        broken up into its individual elements.  Then, because we
                        will also be making use of the Wrapper, it is necessary to
                        include the <literal moreinfo="none">wrapper.jar</literal>
                        file as well:
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[wrapper.java.classpath.1=/usr/lib/jakarta-tomcat-4.1.18/common/lib/wrapper.jar
wrapper.java.classpath.2=/opt/IBMJava2-131/lib/tools.jar
wrapper.java.classpath.3=/usr/lib/jakarta-tomcat-4.1.18/bin/bootstrap.jar]]></screen>
                    </informalexample>
                </section>
                <section>
                    <title>Main Class</title>
                    <para>
                        The next component of the command used to launch Tomcat is the
                        main class, <literal moreinfo="none">org.apache.catalina.startup.Bootstrap</literal>.
                        The main class executed by Java when launched is specified by
                        using the 
                        <literal moreinfo="none"><ulink url="prop-java-mainclass.html">wrapper.java.mainclass</ulink></literal>
                        property.  As mentioned above however.  Because we are making
                        use of the <literal moreinfo="none">WrapperStartStopApp</literal>
                        helper class to start and stop Tomcat, we will specify that
                        class's full name as the main class.  The Tomcat main classes are
                        then specified as application parameters below.
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperStartStopApp]]></screen>
                    </informalexample>
                </section>
                <section>
                    <title>Application Parameters</title>
                    <para>
                        Application parameters are set using the
                        <literal moreinfo="none"><ulink url="prop-app-parameter-n.html">wrapper.app-parameter.&lt;n&gt;</ulink></literal>
                        properties.  Application parameters appear in the Java command
                        line directly after the main class.
                    </para>
                    <para>
                        When using the <literal moreinfo="none">WrapperStartStopApp</literal>
                        helper class, a lot of information needs to be provided about
                        both the "start" and "stop" classes.  This information includes
                        each classes' full name, the list of parameters passed to their
                        main methods, and a flag instructing the helper class whether or
                        not it should wait for all non daemon threads to exit before
                        causing the JVM to exit.
                    </para>
                    <para>
                        To make it clear how all of this information is encoded, we will
                        start by presenting the property values for the Tomcat
                        application several comments have been added above what is
                        normally in the <literal moreinfo="none">wrapper.conf</literal>
                        file to make it clearer what the properties mean.  We suggest
                        adding these comments to your configuration file as well.
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[
# The first application parameter is the name of the class whose main
# method is to be called when the application is launched.  The class
# name is followed by the number of parameters to be passed to its main
# method.  Then comes the actual parameters.
wrapper.app.parameter.1=org.apache.catalina.startup.Bootstrap
wrapper.app.parameter.2=1
wrapper.app.parameter.3=start

# The start parameters are followed by the name of the class whose main
# method is to be called to stop the application.  The stop class name
# is followed by a flag which controls whether or not the Wrapper should
# wait for all non daemon threads to complete before exiting the JVM.
# The flag is followed by the number of parameters to be passed to the
# stop class's main method.  Finally comes the actual parameters.
wrapper.app.parameter.4=org.apache.catalina.startup.Bootstrap
wrapper.app.parameter.5=true
wrapper.app.parameter.6=1
wrapper.app.parameter.7=stop]]></screen>
                    </informalexample>
                    <para>
                        The start and stop class names should be fairly clear.  The
                        first parameter count is required to locate the stop class
                        in the parameter list.  The second count is there for
                        consistency.
                    </para>
                    <para>
                        The flag at parameter #5 above is used to control the
                        behavior of the <literal moreinfo="none">WrapperStartStopApp</literal>
                        helper class when it is shutting down the JVM.  When the Wrapper
                        sends a JVM shutdown request, <literal moreinfo="none">WrapperStartStopApp</literal>
                        responds by calling the main method of the "stop" class with the
                        configured parameters.  The flag above controls what happens when
                        that main method returns.  If the flag is false then
                        <literal moreinfo="none">System.exit(0)</literal> will be called
                        immediately.  When true, <literal moreinfo="none">WrapperStartStopApp</literal>
                        will wait until all non daemon threads have completed before
                        calling <literal moreinfo="none">System.exit(0)</literal>.
                        The later is the behavior which produces the cleanest shutdown
                        for Tomcat.  If true is specified, but one or more daemon threads
                        do not complete, the Wrapper will forcibly kill the JVM after its
                        <literal moreinfo="none"><ulink url="prop-shutdown-timeout.html">Shutdown Timeout</ulink></literal>
                        has expired.  This defaults to 30 seconds.
                    </para>
                    <para>
                        Non-daemon threads are counted by iterating over all threads in the
                        system and counting those whose isDaemon method returns false.
                        Unfortunately, this count will never actually reach 0 on most JVMs
                        because of the existence of system threads.  In most Sun JVMs, there
                        will be one non-daemon system thread.  To make the shutdown work
                        correctly, this system thread count needs to be correct.  It can be
                        set by defining a
                        <literal moreinfo="none">org.tanukisoftware.wrapper.WrapperStartStopApp.systemThreadCount</literal>
                        system property.  The default value is 1 thread.
                    </para>
                    <note>
                        <para>
                            If the main method of the stop class calls System.exit from within its
                            main thread, that thread will in effect become deadlocked by that call.
                            The Wrapper avoids a deadlock by detecting this and proceeding with the
                            shutdown after 5 seconds.  This may however result in the application
                            failing to shutdown cleanly on its own and should be avoided where
                            possible.
                        </para>
                        <para>
                            This case can be tested for by enabling the wrapper.debug=true property
                            and then observing the log file during the shutdown process.
                        </para>
                    </note>
                </section>
                <section>
                    <title>Library Path</title>
                    <para>
                        In order to use the Wrapper, there is one more property which
                        much be set.  The Wrapper makes use of a native library to
                        control interactions with the system.  This file
                        <literal moreinfo="none">libwrapper.so</literal> needs to be
                        specified on the library path supplied to the JVM.  Tomcat
                        does not have any native libraries of its own, but if it did,
                        the directories where they were located would also need to be
                        specified.  The library path is set using the 
                        <literal moreinfo="none"><ulink url="prop-java-library-path-n.html">wrapper.java-library-path.&lt;n&gt;</ulink></literal>
                        properties.
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[wrapper.java.library.path.1=/usr/lib/jakarta-tomcat-4.1.18/common/lib]]></screen>
                    </informalexample>
                </section>
                <section>
                    <title>Putting It All Together</title>
                    <para>
                        Putting it all together, we get the following (Note the first
                        additional parameter line was wrapped for the documentation.
                        It is actually on a single line without spaces):
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[wrapper.java.command=/opt/IBMJava2-131/bin/java

wrapper.java.additional.1=-Djava.endorsed.dirs=/usr/lib/jakarta-tomcat-4.1.18/bin:
  /usr/lib/jakarta-tomcat-4.1.18/common/endorsed
wrapper.java.additional.2=-Dcatalina.base=/usr/lib/jakarta-tomcat-4.1.18
wrapper.java.additional.3=-Dcatalina.home=/usr/lib/jakarta-tomcat-4.1.18
wrapper.java.additional.4=-Djava.io.tmpdir=/usr/lib/jakarta-tomcat-4.1.18/temp
                        
wrapper.java.classpath.1=/usr/lib/jakarta-tomcat-4.1.18/common/lib/wrapper.jar
wrapper.java.classpath.2=/opt/IBMJava2-131/lib/tools.jar
wrapper.java.classpath.3=/usr/lib/jakarta-tomcat-4.1.18/bin/bootstrap.jar

wrapper.java.library.path.1=/usr/lib/jakarta-tomcat-4.1.18/common/lib

wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperStartStopApp

wrapper.app.parameter.1=org.apache.catalina.startup.Bootstrap
wrapper.app.parameter.2=1
wrapper.app.parameter.3=start
wrapper.app.parameter.4=org.apache.catalina.startup.Bootstrap
wrapper.app.parameter.5=true
wrapper.app.parameter.6=1
wrapper.app.parameter.7=stop]]></screen>
                    </informalexample>
                    <para>
                        Notice what while this will function correctly on this
                        particular machine, it is highly dependent on the directory
                        structure and platform.  By taking advantage of the fact that
                        the Wrapper's scripts always set the current directory to the
                        location of the script, and by making use of a single environment
                        variable, we are able to modify the above properties so that
                        they are completely platform and machine independent.  One
                        exception in the case of Tomcat, being the
                        <literal moreinfo="none">java.endorsed.dirs</literal> property,
                        which contains a UNIX path separator.
                    </para>
                    <informalexample>
                        <screen format="linespecific"><![CDATA[wrapper.java.command=%JAVA_HOME%/bin/java

wrapper.java.additional.1=-Djava.endorsed.dirs=../bin:../common/endorsed
wrapper.java.additional.2=-Dcatalina.base=..
wrapper.java.additional.3=-Dcatalina.home=..
wrapper.java.additional.4=-Djava.io.tmpdir=../temp

wrapper.java.classpath.1=../common/lib/wrapper.jar
wrapper.java.classpath.2=%JAVA_HOME%/lib/tools.jar
wrapper.java.classpath.3=../bin/bootstrap.jar

wrapper.java.library.path.1=../common/lib

wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperStartStopApp

wrapper.app.parameter.1=org.apache.catalina.startup.Bootstrap
wrapper.app.parameter.2=1
wrapper.app.parameter.3=start
wrapper.app.parameter.4=org.apache.catalina.startup.Bootstrap
wrapper.app.parameter.5=true
wrapper.app.parameter.6=1
wrapper.app.parameter.7=stop]]></screen>
                    </informalexample>
                    <note>
                        <para>
                            It has been reported that Tomcat 5.0.28 will not work correctly if the
                            bin directory is included in the java.endorsed.dirs system property.
                            This is caused by a change in Tomcat, rather than any issue with the
                            Wrapper.  Please modify the above configuration as follows:
                        </para>
                        <informalexample>
                            <screen format="linespecific"><![CDATA[wrapper.java.additional.1=-Djava.endorsed.dirs=../common/endorsed]]></screen>
                        </informalexample>
                    </note>
                </section>
            </section>
            <section>
                <title>Trying It Out</title>
                <para>
                    Tomcat can now be run by simply executing
                    <literal moreinfo="none">bin/tomcat console</literal>.
                    Because of the way the Wrapper sets its current directory, it
                    is not necessary to run this script from within the
                    <literal moreinfo="none">bin</literal> directory.
                </para>
                <para>
                    As you will see if you omit a command, the scripts shipped
                    with the wrapper are fairly standard daemon scripts.  They
                    accept <literal moreinfo="none">console</literal>,
                    <literal moreinfo="none">start</literal>,
                    <literal moreinfo="none">stop</literal>,
                    <literal moreinfo="none">restart</literal>, and
                    <literal moreinfo="none">dump</literal> commands.
                    The <literal moreinfo="none">start</literal>,
                    <literal moreinfo="none">stop</literal>, and
                    <literal moreinfo="none">restart</literal> commands are common
                    to most daemon scripts and are used to control the wrapper and 
                    its application as a daemon process.  The 
                    <literal moreinfo="none">status</literal> command
                    can be used to find out whether or not the wrapper is currently
                    running.  The <literal moreinfo="none">console</literal> command
                    will launch the wrapper in the current shell, making it
                    possible to kill the application with CTRL-C.  The final
                    command, <literal moreinfo="none">dump</literal>, will send a
                    <literal moreinfo="none">kill -3</literal> signal to the wrapper
                    causing the its JVM to do a full thread dump.
                </para>
                <para>
                    Congratulations.  Your application should now be up and running.
                </para>
                <para>
                    If you did have any problems, please take a look at the
                    <ulink url="troubleshooting.html">Troubleshooting</ulink>
                    section for help with tracking down the problem.
                </para>
            </section>
        </section>
    </section>
</chapter>
